{"ast":null,"code":"'use strict';\n\nfunction withIs(Class, {\n  className,\n  symbolName\n}) {\n  const symbol = Symbol.for(symbolName);\n  const ClassIsWrapper = {\n    // The code below assigns the class wrapper to an object to trick\n    // JavaScript engines to show the name of the extended class when\n    // logging an instances.\n    // We are assigning an anonymous class (class wrapper) to the object\n    // with key `className` to keep the correct name.\n    // If this is not supported it falls back to logging `ClassIsWrapper`.\n    [className]: class extends Class {\n      constructor(...args) {\n        super(...args);\n        Object.defineProperty(this, symbol, {\n          value: true\n        });\n      }\n      get [Symbol.toStringTag]() {\n        return className;\n      }\n    }\n  }[className];\n  ClassIsWrapper[`is${className}`] = obj => !!(obj && obj[symbol]);\n  return ClassIsWrapper;\n}\nfunction withIsProto(Class, {\n  className,\n  symbolName,\n  withoutNew\n}) {\n  const symbol = Symbol.for(symbolName);\n\n  /* eslint-disable object-shorthand */\n  const ClassIsWrapper = {\n    [className]: function (...args) {\n      if (withoutNew && !(this instanceof ClassIsWrapper)) {\n        return new ClassIsWrapper(...args);\n      }\n      const _this = Class.call(this, ...args) || this;\n      if (_this && !_this[symbol]) {\n        Object.defineProperty(_this, symbol, {\n          value: true\n        });\n      }\n      return _this;\n    }\n  }[className];\n  /* eslint-enable object-shorthand */\n\n  ClassIsWrapper.prototype = Object.create(Class.prototype);\n  ClassIsWrapper.prototype.constructor = ClassIsWrapper;\n  Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\n    get() {\n      return className;\n    }\n  });\n  ClassIsWrapper[`is${className}`] = obj => !!(obj && obj[symbol]);\n  return ClassIsWrapper;\n}\nmodule.exports = withIs;\nmodule.exports.proto = withIsProto;","map":{"version":3,"names":["withIs","Class","className","symbolName","symbol","Symbol","for","ClassIsWrapper","constructor","args","Object","defineProperty","value","toStringTag","obj","withIsProto","withoutNew","_this","call","prototype","create","get","module","exports","proto"],"sources":["/Users/cpereira/Documents/GIT/Neo/neovest/neovest/node_modules/class-is/index.js"],"sourcesContent":["'use strict';\n\nfunction withIs(Class, { className, symbolName }) {\n    const symbol = Symbol.for(symbolName);\n\n    const ClassIsWrapper = {\n        // The code below assigns the class wrapper to an object to trick\n        // JavaScript engines to show the name of the extended class when\n        // logging an instances.\n        // We are assigning an anonymous class (class wrapper) to the object\n        // with key `className` to keep the correct name.\n        // If this is not supported it falls back to logging `ClassIsWrapper`.\n        [className]: class extends Class {\n            constructor(...args) {\n                super(...args);\n                Object.defineProperty(this, symbol, { value: true });\n            }\n\n            get [Symbol.toStringTag]() {\n                return className;\n            }\n        },\n    }[className];\n\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\n\n    return ClassIsWrapper;\n}\n\nfunction withIsProto(Class, { className, symbolName, withoutNew }) {\n    const symbol = Symbol.for(symbolName);\n\n    /* eslint-disable object-shorthand */\n    const ClassIsWrapper = {\n        [className]: function (...args) {\n            if (withoutNew && !(this instanceof ClassIsWrapper)) {\n                return new ClassIsWrapper(...args);\n            }\n\n            const _this = Class.call(this, ...args) || this;\n\n            if (_this && !_this[symbol]) {\n                Object.defineProperty(_this, symbol, { value: true });\n            }\n\n            return _this;\n        },\n    }[className];\n    /* eslint-enable object-shorthand */\n\n    ClassIsWrapper.prototype = Object.create(Class.prototype);\n    ClassIsWrapper.prototype.constructor = ClassIsWrapper;\n\n    Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {\n        get() {\n            return className;\n        },\n    });\n\n    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);\n\n    return ClassIsWrapper;\n}\n\nmodule.exports = withIs;\nmodule.exports.proto = withIsProto;\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,MAAMA,CAACC,KAAK,EAAE;EAAEC,SAAS;EAAEC;AAAW,CAAC,EAAE;EAC9C,MAAMC,MAAM,GAAGC,MAAM,CAACC,GAAG,CAACH,UAAU,CAAC;EAErC,MAAMI,cAAc,GAAG;IACnB;IACA;IACA;IACA;IACA;IACA;IACA,CAACL,SAAS,GAAG,cAAcD,KAAK,CAAC;MAC7BO,WAAWA,CAAC,GAAGC,IAAI,EAAE;QACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;QACdC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEP,MAAM,EAAE;UAAEQ,KAAK,EAAE;QAAK,CAAC,CAAC;MACxD;MAEA,KAAKP,MAAM,CAACQ,WAAW,IAAI;QACvB,OAAOX,SAAS;MACpB;IACJ;EACJ,CAAC,CAACA,SAAS,CAAC;EAEZK,cAAc,CAAC,KAAKL,SAAS,EAAE,CAAC,GAAIY,GAAG,IAAK,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACV,MAAM,CAAC,CAAC;EAElE,OAAOG,cAAc;AACzB;AAEA,SAASQ,WAAWA,CAACd,KAAK,EAAE;EAAEC,SAAS;EAAEC,UAAU;EAAEa;AAAW,CAAC,EAAE;EAC/D,MAAMZ,MAAM,GAAGC,MAAM,CAACC,GAAG,CAACH,UAAU,CAAC;;EAErC;EACA,MAAMI,cAAc,GAAG;IACnB,CAACL,SAAS,GAAG,UAAU,GAAGO,IAAI,EAAE;MAC5B,IAAIO,UAAU,IAAI,EAAE,IAAI,YAAYT,cAAc,CAAC,EAAE;QACjD,OAAO,IAAIA,cAAc,CAAC,GAAGE,IAAI,CAAC;MACtC;MAEA,MAAMQ,KAAK,GAAGhB,KAAK,CAACiB,IAAI,CAAC,IAAI,EAAE,GAAGT,IAAI,CAAC,IAAI,IAAI;MAE/C,IAAIQ,KAAK,IAAI,CAACA,KAAK,CAACb,MAAM,CAAC,EAAE;QACzBM,MAAM,CAACC,cAAc,CAACM,KAAK,EAAEb,MAAM,EAAE;UAAEQ,KAAK,EAAE;QAAK,CAAC,CAAC;MACzD;MAEA,OAAOK,KAAK;IAChB;EACJ,CAAC,CAACf,SAAS,CAAC;EACZ;;EAEAK,cAAc,CAACY,SAAS,GAAGT,MAAM,CAACU,MAAM,CAACnB,KAAK,CAACkB,SAAS,CAAC;EACzDZ,cAAc,CAACY,SAAS,CAACX,WAAW,GAAGD,cAAc;EAErDG,MAAM,CAACC,cAAc,CAACJ,cAAc,CAACY,SAAS,EAAEd,MAAM,CAACQ,WAAW,EAAE;IAChEQ,GAAGA,CAAA,EAAG;MACF,OAAOnB,SAAS;IACpB;EACJ,CAAC,CAAC;EAEFK,cAAc,CAAC,KAAKL,SAAS,EAAE,CAAC,GAAIY,GAAG,IAAK,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACV,MAAM,CAAC,CAAC;EAElE,OAAOG,cAAc;AACzB;AAEAe,MAAM,CAACC,OAAO,GAAGvB,MAAM;AACvBsB,MAAM,CAACC,OAAO,CAACC,KAAK,GAAGT,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script"}
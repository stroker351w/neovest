{"ast":null,"code":"var _jsxFileName = \"/Users/cpereira/Documents/GIT/Neo/neovest/neovest/src/App.js\";\nimport React, { useState } from 'react';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3 from 'web3';\nconst ConnectButton = () => {\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState(null);\n  const connectWallet = async () => {\n    try {\n      // Create WalletConnect Provider\n      const provider = new WalletConnectProvider();\n\n      // Enable session (triggers QR Code modal)\n      await provider.enable();\n\n      // Create Web3 instance\n      const web3 = new Web3(provider);\n\n      // Get connected accounts\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n      setConnected(true);\n\n      // Handle disconnection\n      provider.on(\"disconnect\", () => {\n        setConnected(false);\n        setAccount(null);\n      });\n    } catch (error) {\n      console.error(\"Failed to connect wallet:\", error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, connected ? `Connected: ${account}` : 'Connect Wallet');\n};\nexport default ConnectButton;","map":{"version":3,"names":["React","useState","WalletConnectProvider","Web3","ConnectButton","connected","setConnected","account","setAccount","connectWallet","provider","enable","web3","accounts","eth","getAccounts","on","error","console","createElement","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/cpereira/Documents/GIT/Neo/neovest/neovest/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3 from 'web3';\n\nconst ConnectButton = () => {\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState(null);\n\n  const connectWallet = async () => {\n    try {\n      // Create WalletConnect Provider\n      const provider = new WalletConnectProvider();\n\n      // Enable session (triggers QR Code modal)\n      await provider.enable();\n\n      // Create Web3 instance\n      const web3 = new Web3(provider);\n\n      // Get connected accounts\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n      setConnected(true);\n\n      // Handle disconnection\n      provider.on(\"disconnect\", () => {\n        setConnected(false);\n        setAccount(null);\n      });\n    } catch (error) {\n      console.error(\"Failed to connect wallet:\", error);\n    }\n  };\n\n  return (\n    <button onClick={connectWallet}>\n      {connected ? `Connected: ${account}` : 'Connect Wallet'}\n    </button>\n  );\n};\n\nexport default ConnectButton;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,qBAAqB,MAAM,8BAA8B;AAChE,OAAOC,IAAI,MAAM,MAAM;AAEvB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,IAAIR,qBAAqB,CAAC,CAAC;;MAE5C;MACA,MAAMQ,QAAQ,CAACC,MAAM,CAAC,CAAC;;MAEvB;MACA,MAAMC,IAAI,GAAG,IAAIT,IAAI,CAACO,QAAQ,CAAC;;MAE/B;MACA,MAAMG,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC;MAC7CP,UAAU,CAACK,QAAQ,CAAC,CAAC,CAAC,CAAC;MACvBP,YAAY,CAAC,IAAI,CAAC;;MAElB;MACAI,QAAQ,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;QAC9BV,YAAY,CAAC,KAAK,CAAC;QACnBE,UAAU,CAAC,IAAI,CAAC;MAClB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEjB,KAAA,CAAAmB,aAAA;IAAQC,OAAO,EAAEX,aAAc;IAAAY,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5BrB,SAAS,GAAG,cAAcE,OAAO,EAAE,GAAG,gBACjC,CAAC;AAEb,CAAC;AAED,eAAeH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}